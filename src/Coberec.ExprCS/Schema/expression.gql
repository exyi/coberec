type BinaryExpression {
    operator: String
    left: Expression
    right: Expression
}

type NotExpression {
    expr: Expression
}

type MethodCallExpression {
    method: MethodReference
    args: [Expression]
    # automatically adjusts reference on the target (unwraps reference for objects, makes reference for structs)
    target: Expression!
}

type NewObjectExpression {
    ctor: MethodReference
    args: [Expression]
}

# Gets a reference to the field
type FieldAccessExpression {
    field: FieldReference
    # automatically adjusts reference on the target (unwraps reference for objects, makes reference for structs)
    target: Expression!
}

type ReferenceAssignExpression {
    # target must be of type ByReference
    target: Expression
    value: Expression
}

# returns a value from a reference
type DereferenceExpression {
    # expression must be of type ByReference
    expr: Expression
}

# returns a reference to a local variable or a parameter
type VariableReferenceExpression {
    variable: ParameterExpression
}

# Stores the value into an anonymous temporary variable, and returns the address of that variable.
type AddressOfExpression {
    expr: Expression
}

type NumericConversionExpression {
    value: Expression
    type: TypeReference
    checked: Boolean
}

# reference or boxing/unboxing conversion
# automatically dereferences a by ref value before it's boxed/converted
type ReferenceConversionExpression {
    value: Expression
    type: TypeReference
}

type ConstantExpression {
    value: Any!
    type: TypeReference
}

type DefaultExpression {
    type: TypeReference
}

type ParameterExpression {
    id: ID
    name: String!
    type: TypeReference
    mutable: Boolean
}

type LetInExpression {
    variable: ParameterExpression
    value: Expression
    target: Expression
}

type ConditionalExpression {
    condition: Expression
    ifTrue: Expression
    ifFalse: Expression
}

# creates an anonymous function. Should translate to a local function or a lambda expression
type FunctionExpression {
    params: [MethodParameter]
    args: [ParameterExpression]
    body: Expression
}

# creates a function or delegate instance from a method reference
type FunctionReference {
    method: MethodSignature
    target: Expression!
}

# Converts function to equivalent types
# Does function -> function (by using covariance/contravariance)
#      delegate -> function
#      function -> delegate
#      delegate -> delegate (must be only compatible, for example can convert Func<int, bool> <-> Predicate<bool>)
type FunctionConversionExpression {
    value: Expression
    type: TypeReference
}

# invokes a function
type InvokeExpression {
    # function must be of type FunctionType, delegates are not supported because the return type is not known without metadata lookup
    function: Expression
    args: [Expression]
}

type LabelTarget {
    id: ID
    name: String!
    type: TypeReference
}

#type LabelExpression {
#    target: LabelTarget
#    defaultValue: Expression
#}

#type GotoExpression {
#    value: Expression
#    target: LabelTarget
#}

type NewArrayExpression {
    type: ArrayType
    dimensions: [Expression]
}

# returns a reference to the specified array element
type ArrayIndexExpression {
    array: Expression
    indices: [Expression]
}

type BreakExpression {
    value: Expression
    target: LabelTarget
}

type BreakableExpression {
    expression: Expression
    label: LabelTarget
}

type LoopExpression {
    body: Expression
}

type BlockExpression {
    expressions: [Expression]
    result: Expression
}

interface LowerableExpression {
    type: TypeReference
    lowered: Expression
}

union Expression =
      BinaryExpression
    | NotExpression
    | MethodCallExpression
    | NewObjectExpression
    | FieldAccessExpression
    | ReferenceAssignExpression
    | DereferenceExpression
    | VariableReferenceExpression
    | AddressOfExpression
    | NumericConversionExpression
    | ReferenceConversionExpression
    | ConstantExpression
    | DefaultExpression
    | ParameterExpression
    | ConditionalExpression
    | FunctionExpression
    | FunctionConversionExpression
    | InvokeExpression
    #| LabelExpression
    #| GotoExpression
    | BreakExpression
    | BreakableExpression
    | LoopExpression
    | LetInExpression
    | NewArrayExpression
    | ArrayIndexExpression
    | BlockExpression
    | LowerableExpression
