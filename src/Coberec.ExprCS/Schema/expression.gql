# Expression evaluates a binary operator. Equivalent of `Left {Operator} Right` code.
type BinaryExpression
    @format(t: "({left} {operator} {right})") {
    operator: String
    left: Expression
    right: Expression
}

# Expression that negates a given boolean expression. Equivalent of `!Expr` in C#.
type NotExpression
    @format(t: "!{expr}") {
    expr: Expression
}

# Expression represents call of `Method` on object `Target` with the given `Args`. If `Method` is static, `Target` is null.
type MethodCallExpression
    @format(t: "{target}.{method}{args}") {
    method: MethodReference
    args: [Expression]
    # automatically adjusts reference on the target (unwraps reference for objects, makes reference for structs)
    target: Expression!
}

# Expression that creates a new object and invokes a constructor. Equivalent of `new Ctor(Args)`.
type NewObjectExpression
    @format(t: "{ctor}{args}") {
    ctor: MethodReference
    args: [Expression]
}

# Expression represents access to `Field` on object `Target`, returns the reference to the field. If `Field` is static, `Target` is null.
type FieldAccessExpression
    @format(t: "{target}.{field}") {
    field: FieldReference
    # automatically adjusts reference on the target (unwraps reference for objects, makes reference for structs)
    target: Expression!
}

# Expression that represents an assignment into a reference. Used to assign into variables and fields.
type ReferenceAssignExpression
    @format(t: "{target} = {value}") {
    # target must be of type ByReference
    target: Expression @validateIsWritableReferenceType
    value: Expression
}

# returns a value from a reference
type DereferenceExpression
    @format(t: "*{expr}") {
    # expression must be of type ByReference
    expr: Expression @validateIsReferenceType
}

# returns a reference to a local variable or a parameter
type VariableReferenceExpression
    @format(t: "{variable}") {
    variable: ParameterExpression
}

# Stores the value into an anonymous temporary variable, and returns the address of that variable.
type AddressOfExpression
    @format(t: "&{expr}") {
    expr: Expression
}

# Converts between primitive numeric types
type NumericConversionExpression
    @format(t: "ncast<{type}>({value})") {
    value: Expression
    type: TypeReference @validateTypeIsNotRef
    checked: Boolean
}

# reference or boxing/unboxing conversion
# automatically dereferences a by ref value before it's boxed/converted
type ReferenceConversionExpression
    @format(t: "rcast<{type}>({value})") {
    value: Expression
    type: TypeReference
}

# Expression that evaluates to the constant `Value`. Only supports primitive types and nulls. See <see cref="DefaultExpression" /> in case you want to create a default of a struct.
type ConstantExpression
    @format(t: "{value}:{type}") {
    value: Any!
    type: TypeReference @validateTypeIsNotRef
}

# Expression that evaluates to the default of `Type`.
type DefaultExpression
    @format(t: "default({type})") {
    type: TypeReference @validateTypeIsNotRef
}

# Expression representing a parameter or local variable. Apart from name and type, it is identified by the `Id`.
type ParameterExpression
    @format(t: "{name}[{id} : {type}]") {
    id: ID
    name: String!
    type: TypeReference
    mutable: Boolean
}

# Defines a `Variable` initialized with `Value`. Then evaluates `Target` with the variable in scope and returns its value
type LetInExpression {
    variable: ParameterExpression
    value: Expression
    target: Expression
}

# Expressions equivalent to C#'s `if` or the `a ? b : c` ternary operator. If `Condition` is true, then `IfTrue`, else `IfFalse`.
type ConditionalExpression {
    condition: Expression
    ifTrue: Expression
    ifFalse: Expression
}

# creates an anonymous function. Should translate to a local function or a lambda expression
type FunctionExpression {
    params: [MethodParameter]
    args: [ParameterExpression]
    body: Expression
}

# creates a function or delegate instance from a method reference
type FunctionReference {
    method: MethodSignature
    target: Expression!
}

# Converts function to equivalent types
# Does function -> function (by using covariance/contravariance)
#      delegate -> function
#      function -> delegate
#      delegate -> delegate (must be only compatible, for example can convert Func<int, bool> <-> Predicate<bool>)
type FunctionConversionExpression {
    value: Expression
    type: TypeReference
}

# invokes a function
type InvokeExpression
    @format(t: "{function}{args}") {
    # function must be of type FunctionType, delegates are not supported because the return type is not known without metadata lookup
    function: Expression
    args: [Expression]
}

type LabelTarget
    @format(t: "Label {name}: {type}") {
    id: ID
    name: String!
    type: TypeReference
}

# Expression that creates a new uninitialized array.
type NewArrayExpression
    @format(t: "new array {type}{dimensions}") {
    type: ArrayType
    dimensions: [Expression]
}

# returns a reference to the specified array element
type ArrayIndexExpression
    @format(t: "{array}{indices}") {
    array: Expression
    indices: [Expression]
}

type BreakExpression
    @format(t: "break {value} -> {target}") {
    value: Expression
    target: LabelTarget
}

type BreakableExpression {
    expression: Expression
    label: LabelTarget
}

type LoopExpression {
    body: Expression
}

type BlockExpression {
    expressions: [Expression]
    result: Expression
}

interface LowerableExpression {
    type: TypeReference
    lowered: Expression
}

# Represents a code fragment - a single expression. May have many forms, see the nested classes for more information.
union Expression =
      BinaryExpression
    | NotExpression
    | MethodCallExpression
    | NewObjectExpression
    | FieldAccessExpression
    | ReferenceAssignExpression
    | DereferenceExpression
    | VariableReferenceExpression
    | AddressOfExpression
    | NumericConversionExpression
    | ReferenceConversionExpression
    | ConstantExpression
    | DefaultExpression
    | ParameterExpression
    | ConditionalExpression
    | FunctionExpression
    | FunctionConversionExpression
    | InvokeExpression
    | BreakExpression
    | BreakableExpression
    | LoopExpression
    | LetInExpression
    | NewArrayExpression
    | ArrayIndexExpression
    | BlockExpression
    | LowerableExpression
