type ModuleSignature {
    name: String
}

type NamespaceSignature {
    name: String
    parent: NamespaceSignature!
}

type Accessibility {
    public: Boolean
    derivedVisible: Boolean
    internalVisible: Boolean
}

union TypeOrNamespace = NamespaceSignature | TypeSignature

type GenericParameter {
    id: ID
    name: String @validateNotEmpty
}

interface MemberSignature {
    name: String @validateNotEmpty
    accessibility: Accessibility
}

interface MemberReference {
    signature: MemberSignature
    typeParameters: [TypeReference]
}

type TypeSignature implements MemberSignature {
    name: String
    parent: TypeOrNamespace
    kind: String
    isValueType: Boolean
    canOverride: Boolean
    isAbstract: Boolean
    accessibility: Accessibility
    typeParameters: [GenericParameter] # TODO: document how nested types work
}

type SpecializedType {
    type: TypeSignature
    genericParameters: [TypeReference]
}

type ArrayType {
    type: TypeReference @validateTypeIsNotRef
    dimensions: Int @default(value: 1)
                    @validateRange(low: 1, high: 65535)
}

type ByReferenceType {
    type: TypeReference
}

type PointerType {
    type: TypeReference
}

# represents an anonymous delegate
# it has a limitation that the function can not return itself (by type), but it can for example return equivalent delegate type
type FunctionType {
    params: [MethodParameter]
    resultType: TypeReference
}

union TypeReference = SpecializedType | ArrayType | ByReferenceType | PointerType | GenericParameter | FunctionType

type MethodParameter {
    type: TypeReference
    name: String @validateNotEmpty
    hasDefaultValue: Boolean
    defaultValue: Any!
    isParams: Boolean
}

type MethodSignature implements MemberSignature {
    declaringType: TypeSignature
    params: [MethodParameter]
    name: String @validateNotEmpty
    resultType: TypeReference
    isStatic: Boolean
    accessibility: Accessibility
    isVirtual: Boolean
    isOverride: Boolean
    isAbstract: Boolean
    hasSpecialName: Boolean
    typeParameters: [GenericParameter]
}

type MethodReference implements MemberReference {
    signature: MethodSignature
    typeParameters: [TypeReference]
    methodParameters: [TypeReference]
}

type FieldSignature implements MemberSignature {
    declaringType: TypeSignature
    name: String @validateNotEmpty
    accessibility: Accessibility
    resultType: TypeReference
    isStatic: Boolean
    isReadonly: Boolean
}

type FieldReference implements MemberReference {
    signature: FieldSignature
    typeParameters: [TypeReference]
}

type PropertySignature implements MemberSignature {
    declaringType: TypeSignature
    type: TypeReference
    name: String @validateNotEmpty
    accessibility: Accessibility
    isStatic: Boolean
    getter: MethodSignature!
    setter: MethodSignature!
}
type PropertyReference implements MemberReference {
    signature: PropertySignature
    typeParameters: [TypeReference]
}
