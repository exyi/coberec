type ModuleSignature {
    name: String
}

# Namespace name separated by dots. Use <see cref="NamespaceSignature.Parse(string)" /> to create an instance
type NamespaceSignature @customFormat {
    name: String
    parent: NamespaceSignature!
}

# Defines accessibility of a metadata member
type Accessibility @customFormat {
    public: Boolean
    derivedVisible: Boolean
    internalVisible: Boolean
}

union TypeOrNamespace = NamespaceSignature | TypeSignature

# Represents a generic parameter of a type or method.
type GenericParameter
    @format(t: "{name}({id})") {
    id: ID
    name: String
}

interface MemberSignature {
    name: String
    accessibility: Accessibility
}

interface MemberReference {
    signature: MemberSignature
    typeArguments: [TypeReference]
}

# Basic metadata about a type - <see cref="TypeSignature.Name" />, <see cref="TypeSignature.Kind" />, <see cref="TypeSignature.Accessibility" />, ...
type TypeSignature implements MemberSignature @customFormat {
    # Name of the type
    name: String
    # Where the type is declared
    parent: TypeOrNamespace
    # Type of the type. interface, class, struct, delegate, enum
    kind: String
    # If the type is passed by value. Corresponds to the C# `where T: struct` construct
    isValueType: Boolean
    # If the type can be inherited from. Basically corresponds to "not sealed", but value types, delegates and static classes also can not overridden
    canOverride: Boolean
    # If the type can not be instantiated. Interfaces, abstract classes and static classes are abstract
    isAbstract: Boolean
    accessibility: Accessibility
    # Type parameters (generic parameters) of this type. Only contains parameters of this specific type, not the parent type.
    typeParameters: [GenericParameter]
}

# A type reference to a signature with filled in type parameters. This class is basically <see cref="TypeSignature" /> + generic arguments
type SpecializedType @customFormat {
    type: TypeSignature
    typeArguments: [TypeReference]
}

# Type reference that represents an array `Type[...Dimensions]`
type ArrayType @customFormat {
    type: TypeReference @validateTypeIsNotRef
    dimensions: Int @default(value: 1)
                    @validateRange(low: 1, high: 65535)
}

# Reference type. In IL it is denoted as `Type&amp;`, in C# it is usually represented by `ref` keyword.
type ByReferenceType
    @format(t: "{type}&") {
    type: TypeReference
}

# unsafe pointer
type PointerType
    @format(t: "{type}*") {
    type: TypeReference @validateTypeIsNotRef
}

# Represents a type of a function not bound to any delegate.
# It has a limitation that the function can not return itself (by type), but it can for example return equivalent delegate type.
type FunctionType
    @format(t: "{params} -> {resultType}") {
    params: [MethodParameter]
    resultType: TypeReference
}

union TypeReference = SpecializedType | ArrayType | ByReferenceType | PointerType | GenericParameter | FunctionType

# Represents a method parameter signature
type MethodParameter @customFormat {
    type: TypeReference
    name: String
    hasDefaultValue: Boolean
    defaultValue: Any!
    isParams: Boolean
}

# Basic metadata about a method - <see cref="Name" />, <see cref="Accessibility" />, <see cref="Params" />, <see cref="DeclaringType" />, ...
type MethodSignature implements MemberSignature @customFormat {
    declaringType: TypeSignature
    params: [MethodParameter]
    name: String
    resultType: TypeReference
    isStatic: Boolean
    accessibility: Accessibility
    isVirtual: Boolean
    isOverride: Boolean
    isAbstract: Boolean
    hasSpecialName: Boolean
    typeParameters: [GenericParameter]
}

# Represents a reference to a method. The generic parameters of the parent class and the method are substituted - this class is basically <see cref="MethodSignature" /> + generic arguments
type MethodReference implements MemberReference @customFormat {
    signature: MethodSignature
    typeArguments: [TypeReference]
    methodTypeArguments: [TypeReference]
}

# Basic metadata about a field - <see cref="Name"/>, <see cref="Accessibility" />, <see cref="DeclaringType" />, ...
type FieldSignature implements MemberSignature @customFormat {
    declaringType: TypeSignature
    name: String
    accessibility: Accessibility
    resultType: TypeReference @validateTypeIsNotRef
    isStatic: Boolean
    isReadonly: Boolean
}

# Represents a reference to a field. The generic parameters of the parent class are substituted - this class is basically <see cref="FieldSignature" /> + generic arguments
type FieldReference implements MemberReference @customFormat {
    signature: FieldSignature
    typeArguments: [TypeReference]
}

# Basic metadata about a property - <see cref="Name" />, <see cref="Accessibility" />, <see cref="DeclaringType" />, ...
type PropertySignature implements MemberSignature @customFormat {
    declaringType: TypeSignature
    type: TypeReference
    name: String
    accessibility: Accessibility
    isStatic: Boolean
    getter: MethodSignature!
    setter: MethodSignature!
}

# Represents a reference to a property. The generic parameters of the parent class are substituted - this class is basically <see cref="PropertySignature" /> + generic arguments
type PropertyReference implements MemberReference {
    signature: PropertySignature
    typeArguments: [TypeReference]
}
